/* global BigInt */
import React, { useState, useEffect } from "react";
import {
  BrowserProvider,
  Contract,
  formatEther,
  formatUnits,
  parseEther,
  parseUnits,
} from "ethers";
import {
  FACTORY_ADDRESS,
  NFT_ADDRESS,
  FACTORY_ABI,
  NFT_ABI,
  TOKEN_ABI,
  USDT_ADDRESS,
  CLUSTER_ADDRESS,
} from "../contracts/Constants";
import { DatasetCard } from "./DatasetCard";
import { CreateDatasetForm } from "./CreateDataset";
import { Card, CardHeader, CardTitle, CardContent } from "./ui/card";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Badge } from "./ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "./ui/tabs";

const DatasetNFTDApp = () => {
  const [provider, setProvider] = useState(null);
  const [signer, setSigner] = useState(null);
  const [factoryContract, setFactoryContract] = useState(null);
  const [account, setAccount] = useState(null);
  const [datasets, setDatasets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userDatasets, setUserDatasets] = useState([]);
  const [accessibleDatasets, setAccessibleDatasets] = useState([]);

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    uri: "",
    paymentMode: "0",
    fullAccessPrice: "",
    d2cAccessPrice: "",
    expiryAccessPrice: "",
    expiryDuration: "",
    customTokenSupply: "",
  });

  useEffect(() => {
    const initEthers = async () => {
      if (window.ethereum) {
        try {
          const browserProvider = new BrowserProvider(window.ethereum);
          const signer = await browserProvider.getSigner();
          const contract = new Contract(FACTORY_ADDRESS, FACTORY_ABI, signer);

          setProvider(browserProvider);
          setSigner(signer);
          setFactoryContract(contract);

          const address = await signer.getAddress();
          setAccount(address);

          setLoading(false);
        } catch (error) {
          console.error("Error initializing:", error);
        }
      }
    };

    initEthers();
  }, []);

  const loadDatasets = async () => {
    if (!factoryContract || !account) return;

    try {
      setLoading(true);
      const datasetCount = await factoryContract._datasetIds();
      const loadedDatasets = [];
      const userOwnedDatasets = [];
      const userAccessibleDatasets = [];

      for (let i = 1; i <= datasetCount; i++) {
        const dataset = await factoryContract.datasets(i);
        if (dataset.active) {
          const formattedDataset = {
            id: i,
            name: dataset.name,
            description: dataset.description,
            uri: dataset.uri,
            version: dataset.version.toString(),
            active: dataset.active,
            paymentMode: dataset.paymentMode,
            customTokenAddress: dataset.customTokenAddress,
            prices: {
              fullAccessPrice: formatUnits(
                dataset.prices.fullAccessPrice,
                dataset.paymentMode === BigInt(1) ? 6 : 18
              ),
              d2cAccessPrice: formatUnits(
                dataset.prices.d2cAccessPrice,
                dataset.paymentMode === BigInt(1) ? 6 : 18
              ),
              expiryAccessPrice: formatUnits(
                dataset.prices.expiryAccessPrice,
                dataset.paymentMode === BigInt(1) ? 6 : 18
              ),
            },
            expiryDuration: dataset.expiryDuration.toString(),
          };

          loadedDatasets.push(formattedDataset);

          try {
            const nftContract = new Contract(NFT_ADDRESS, NFT_ABI, provider);
            const owner = await nftContract.ownerOf(i);
            if (owner.toLowerCase() === account.toLowerCase()) {
              userOwnedDatasets.push(formattedDataset);
            }
          } catch (error) {
            console.error(
              `Error checking NFT ownership for dataset ${i}:`,
              error
            );
          }

          try {
            const [hasAccess, accessType] = await factoryContract.checkAccess(
              account,
              i
            );

            const getAccessTypeName = (accessType) => {
              switch (Number(accessType)) {
                case 0:
                  return "None";
                case 1:
                  return "Expiry";
                case 2:
                  return "D2C";
                case 3:
                  return "Full";
                default:
                  return "Unknown";
              }
            };

            console.log(`Dataset ${i} - Has Access:`, hasAccess);
            console.log(
              `Dataset ${i} - Access Type:`,
              getAccessTypeName(accessType)
            );

            if (hasAccess) {
              userAccessibleDatasets.push({
                ...formattedDataset,
                accessType: getAccessTypeName(accessType),
              });
            }
          } catch (error) {
            console.error(`Error checking access for dataset ${i}:`, error);
          }
        }
      }

      setDatasets(loadedDatasets);
      setUserDatasets(userOwnedDatasets);
      setAccessibleDatasets(userAccessibleDatasets);
    } catch (error) {
      console.error("Error loading datasets:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (factoryContract && account) {
      loadDatasets();
    }
  }, [factoryContract, account]);

  const connectWallet = async () => {
    try {
      await window.ethereum.request({ method: "eth_requestAccounts" });
      const browserProvider = new BrowserProvider(window.ethereum);
      const signer = await browserProvider.getSigner();
      const address = await signer.getAddress();

      setSigner(signer);
      setAccount(address);

      const contract = new Contract(FACTORY_ADDRESS, FACTORY_ABI, signer);
      setFactoryContract(contract);
    } catch (err) {
      console.error("Failed to connect wallet:", err);
    }
  };

  const createDataset = async (formDataToSubmit) => {
    try {
      setLoading(true);

      // Parse prices based on payment mode
      const decimals = formDataToSubmit.paymentMode === "1" ? 6 : 18;
      const prices = {
        fullAccessPrice: parseUnits(formDataToSubmit.fullAccessPrice, decimals),
        d2cAccessPrice: parseUnits(formDataToSubmit.d2cAccessPrice, decimals),
        expiryAccessPrice: parseUnits(
          formDataToSubmit.expiryAccessPrice,
          decimals
        ),
      };

      // Log the parameters for debugging
      console.log("Creating dataset with params:", {
        name: formDataToSubmit.name,
        description: formDataToSubmit.description,
        uri: formDataToSubmit.uri,
        expiryDuration: Number(formDataToSubmit.expiryDuration) * 24 * 60 * 60,
        paymentMode: parseInt(formDataToSubmit.paymentMode),
        prices,
        customTokenSupply:
          formDataToSubmit.paymentMode === "3"
            ? parseEther(formDataToSubmit.customTokenSupply)
            : 0,
      });

      const tx = await factoryContract.createDataset(
        formDataToSubmit.name,
        formDataToSubmit.description,
        formDataToSubmit.uri,
        Number(formDataToSubmit.expiryDuration) * 24 * 60 * 60,
        parseInt(formDataToSubmit.paymentMode),
        prices,
        formDataToSubmit.paymentMode === "3"
          ? parseEther(formDataToSubmit.customTokenSupply)
          : 0
      );

      await tx.wait();
      await loadDatasets();

      // Reset form
      setFormData({
        name: "",
        description: "",
        uri: "",
        paymentMode: "0",
        fullAccessPrice: "",
        d2cAccessPrice: "",
        expiryAccessPrice: "",
        expiryDuration: "",
        customTokenSupply: "",
      });
    } catch (err) {
      console.error("Failed to create dataset:", err);
      // Add more detailed error logging
      console.log("Error details:", {
        message: err.message,
        code: err.code,
        data: err.data,
      });
    } finally {
      setLoading(false);
    }
  };

  const getPrice = (dataset, accessType) => {
    switch (accessType) {
      case "full":
        return parseUnits(
          dataset.prices.fullAccessPrice.toString(),
          dataset.paymentMode === BigInt(1) ? 6 : 18
        );
      case "d2c":
        return parseUnits(
          dataset.prices.d2cAccessPrice.toString(),
          dataset.paymentMode === BigInt(1) ? 6 : 18
        );
      case "expiry":
        return parseUnits(
          dataset.prices.expiryAccessPrice.toString(),
          dataset.paymentMode === BigInt(1) ? 6 : 18
        );
      default:
        return 0;
    }
  };

  const handleAccessPurchase = async (datasetId, accessType) => {
    try {
      setLoading(true);
      const dataset = datasets.find((d) => d.id === datasetId);
      if (!dataset) return;

      const accessTypeMap = {
        full: 3,
        d2c: 2,
        expiry: 1,
      };

      let value = 0;
      if (dataset.paymentMode === BigInt(0)) {
        value = getPrice(dataset, accessType);
        console.log("ETH Value:", value);
      } else {
        const tokenAddress =
          dataset.paymentMode === BigInt(1)
            ? USDT_ADDRESS
            : dataset.paymentMode === BigInt(2)
            ? CLUSTER_ADDRESS
            : dataset.customTokenAddress;

        console.log("Selected Token Address:", tokenAddress);
        console.log("Factory Address for Approval:", FACTORY_ADDRESS);

        const tokenContract = new Contract(tokenAddress, TOKEN_ABI, signer);
        const price = getPrice(dataset, accessType);

        // Get gas estimate for approval
        const gasLimit = await tokenContract.approve.estimateGas(
          FACTORY_ADDRESS,
          price
        );
        console.log("Estimated Gas for Approval:", gasLimit);

        // Add 20% buffer to gas limit
        const adjustedGasLimit = (gasLimit * BigInt(20)) / BigInt(10);
        console.log("Estimated Gas for Approval:", adjustedGasLimit);

        // Execute approval with gas limit
        const approveTx = await tokenContract.approve(FACTORY_ADDRESS, price, {
          gasLimit: 300000n,
        });
        console.log("Approval Transaction Hash:", approveTx.hash);
        await approveTx.wait();
        console.log("Approval Confirmed");
      }

      // Get gas estimate for purchase
      const gasLimit = await factoryContract.purchaseAccess.estimateGas(
        datasetId,
        accessTypeMap[accessType],
        { value }
      );
      console.log("Estimated Gas for Purchase:", gasLimit);

      // Add 20% buffer to gas limit
      const adjustedGasLimit = (gasLimit * BigInt(12)) / BigInt(10);

      const tx = await factoryContract.purchaseAccess(
        datasetId,
        accessTypeMap[accessType],
        {
          value,
          gasLimit: adjustedGasLimit,
        }
      );
      console.log("Purchase Transaction Hash:", tx.hash);
      await tx.wait();
      console.log("Purchase Confirmed");

      await loadDatasets();
    } catch (error) {
      console.error("Failed to purchase access:", error);
      console.error("Error details:", {
        message: error.message,
        reason: error.reason,
      });
      alert("Failed to purchase access: " + (error.reason || error.message));
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800">
      <nav className="border-b border-gray-700 bg-gray-900/50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <h1 className="text-xl font-bold text-white">Dataset NFT DApp</h1>
          {!account ? (
            <Button
              onClick={connectWallet}
              className="bg-blue-500 hover:bg-blue-600"
            >
              Connect Wallet
            </Button>
          ) : (
            <Badge variant="secondary">
              {`${account.slice(0, 6)}...${account.slice(-4)}`}
            </Badge>
          )}
        </div>
      </nav>

      <main className="container mx-auto p-4">
        <Tabs defaultValue="browse">
          <TabsList>
            <TabsTrigger value="browse">Browse Datasets</TabsTrigger>
            <TabsTrigger value="create">Create Dataset</TabsTrigger>
            <TabsTrigger value="owned">My Datasets</TabsTrigger>
            <TabsTrigger value="access">My Access</TabsTrigger>
          </TabsList>

          <TabsContent value="browse">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {datasets.map((dataset, index) => (
                <DatasetCard
                  key={index}
                  dataset={dataset}
                  onPurchaseAccess={handleAccessPurchase}
                  loading={loading}
                  tokenAbi={TOKEN_ABI}
                  signer={signer}
                />
              ))}
            </div>
          </TabsContent>

          <TabsContent value="create">
            <CreateDatasetForm
              formData={formData}
              setFormData={setFormData}
              onSubmit={createDataset}
              loading={loading}
            />
          </TabsContent>

          <TabsContent value="owned">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {userDatasets.map((dataset, index) => (
                <DatasetCard
                  key={index}
                  dataset={dataset}
                  isOwner={true}
                  loading={loading}
                  signer={signer}
                  tokenAbi={TOKEN_ABI}
                />
              ))}
            </div>
          </TabsContent>

          <TabsContent value="access">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {accessibleDatasets.map((dataset, index) => (
                <Card key={index} className="bg-gray-800/50 border-gray-700">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-lg text-white">
                        {dataset.name}
                      </CardTitle>
                      <Badge variant="secondary">{dataset.accessType}</Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <p className="text-sm text-gray-300">
                        {dataset.description}
                      </p>
                      <p className="text-sm text-gray-300">
                        URI: {dataset.uri}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
};

export default DatasetNFTDApp;
